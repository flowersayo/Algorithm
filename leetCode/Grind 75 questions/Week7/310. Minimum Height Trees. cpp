
class Solution {

     /*

    Hint! 가장 긴 diameter 에서 중심점을 잡으면 최대 두개의 root 가 나올 수 있다.

    1. 각 leaf node 에서 시작해서 거슬러 올라간다. 
    2. 두개의 포인터가 만나면 하나를 킵한다.
    3. 그리고 나머지 포인터들이 만날때까지 계속한다.
    4. 마지막에 만난 두개의 포인터가 가장 긴 diameter 의 중심점이 된다. 

    실제 구현은 BFS topological sort 를 사용한다.
    MHT 의 root 로서 가능한 후보군 목록을 담아두고,
    n>2 일 때까지 leaf node(end point) 를 하나씩 지워간다. 
    그럼 자연스럽게 마지막에 남은 노드가 가장 긴 diameter 의 중심점이 된다.
    */
public:
    std::vector<int> findMinHeightTrees(int n, std::vector<std::vector<int>>& edges) {
        if (n == 1) return {0};
        
        vector<std::vector<int>> adj(n);
        for (const auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }

        vector<int> leaves;
        for (int i = 0; i < n; ++i) {
            if (adj[i].size() == 1) { // leaf node라면
                leaves.push_back(i);
            }
        }

        while (n > 2) {
            n -= leaves.size();
            vector<int> newLeaves;
            for (int i : leaves) {
                int j = adj[i][0]; // leaf node 의 parent node
                adj[j].erase(remove(adj[j].begin(), adj[j].end(), i), adj[j].end()); // parent 에서 leaf node 제거
                if (adj[j].size() == 1) { // 해당 자식 노드를 제거함으로서 parent node 가 leaf node 가 된다면
                    newLeaves.push_back(j);
                }
            }
            leaves = newLeaves;
        }



        return leaves;
    }
};



